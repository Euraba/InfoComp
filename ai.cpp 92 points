#include <iostream>
#include <cstdio>
#include <queue>

const int maxn = 1e3 ;

auto in = fopen("ai.in", "r"), out = fopen("ai.out", "w") ;
int T1, T2, S1, S2, S3, S4, R1, R2, R3, R4 ;
int n ;

bool walls[1 + maxn][1 + maxn] ;

const int dx[] = {0, 1, 0, -1, 0} ;
const int dy[] = {0, 0, 1, 0, -1} ;

typedef std::pair<int, int> PII ;

int cost1[1 + maxn][1 + maxn] ;
int cost2[1 + maxn][1 + maxn] ;

int rob1A(1e9), rob2A(1e9) ;
int rob1B(1e9), rob2B(1e9) ;

int ro1[1 + maxn][1 + maxn] ;
int ro2[1 + maxn][1 + maxn] ;

void checkCol(int x, int y, int rob) {
    if ((x == T1 && y == T2)) {
        return ;
    }
    if ((std::min(T1, S1) <= x && x <= std::max(T1, S1) && std::min(T2, S2) <= y && y <= std::max(T2, S2) )) {
        ro1[x][y] = (1ll * (x - S1) * (T2 - S2)) == (1LL *(y - S2) * (T1 - S1)) || (S1 == T1 && S2 < y && y < T2) || (S2 == T2 && S1 < x && x < T1) ;
        if ((1ll * (x - S1) * (T2 - S2)) == (1LL * (y - S2) * (T1 - S1)) || (S1 == T1 && S2 <= y && y < T2) ||
            (S2 == T2 && S1 <= x && x < T1)) {
            if (rob == 1) {
                rob1A = std::min(rob1A, cost1[x][y]);
            } else {
                rob2A = std::min(rob2A, cost2[x][y]);
            }
        }
    }
    if ((std::min(T1, S3) <= x && x <= std::max(T1, S3) && std::min(T2, S4) <= y && y <= std::max(T2, S4) )) {
        ro2[x][y] = ((1ll * (x - S3) * (T2 - S4)) == (1ll * (y - S4) * (T1 - S3))) || (S3 == T1 && S4 <= y && y < T2) ||
                    (S4 == T2 && S3 < x && x < T1) ;
        if (((1ll * (x - S3) * (T2 - S4)) == (1ll * (y - S4) * (T1 - S3))) || (S3 == T1 && S4 <= y && y < T2) ||
            (S4 == T2 && S3 <= x && x < T1)) {
            if (rob == 1) {
                rob1B = std::min(rob1B, cost1[x][y]);
                if (rob1B == 6) {
                    std::cerr << x << ' ' << y;
                }
            } else {
                rob2B = std::min(rob2B, cost2[x][y]);
            }
        }
    }
}

void bfs1(int x, int y) {
    std::queue<PII> Q ;
    Q.push({x, y}) ;
    auto inbounds = [](int a, int b) -> bool {
        return (1 <= a && a <= n && 1 <= b && b <= n) ;
    };
    while (!Q.empty()) {
        PII top = Q.front() ;
        Q.pop() ;
        for (int i = 1 ; i <= 4 ; ++ i) {
            int xx = top.first + dx[i] ;
            int yy = top.second + dy[i] ;
            if (inbounds(xx, yy) && !cost1[xx][yy] && !walls[xx][yy]) {
                cost1[xx][yy] = cost1[top.first][top.second] + 1 ;
                Q.push({xx, yy}) ;
                checkCol(xx, yy, 1) ;
            }
        }
    }
}

void bfs2(int x, int y) {
    std::queue<PII> Q ;
    Q.push({x, y}) ;
    auto inbounds = [](int a, int b) -> bool {
        return (1 <= a && a <= n && 1 <= b && b <= n) ;
    };
    while (!Q.empty()) {
        PII top = Q.front() ;
        Q.pop() ;
        for (int i = 1 ; i <= 4 ; ++ i) {
            int xx = top.first + dx[i] ;
            int yy = top.second + dy[i] ;
            if (inbounds(xx, yy) && !cost2[xx][yy] && !walls[xx][yy]) {
                cost2[xx][yy] = cost2[top.first][top.second] + 1 ;
                Q.push({xx, yy}) ;
                checkCol(xx, yy, 2) ;
            }
        }
    }
}

int left[1 + maxn][1 + maxn] ;
int up[1 + maxn][1 + maxn] ;

int main() {
    fscanf(in, "%d %d %d %d %d %d %d %d %d %d %d\n", &n, &T1, &T2, &S1, &S2, &S3, &S4, &R1, &R2, &R3, &R4) ;
    int k, i, j, x, y ;
    fscanf(in, "%d\n", &k) ;
    for (i = 1 ; i <= k ; ++ i) {
        fscanf(in, "%d %d\n", &x, &y) ;
        walls[x][y] = 1 ;
    }
    int zid(0) ;
    for (i = 1 ; i <= n ; ++ i) {
        for (j = 1 ; j <= n ; ++ j) {
            if (walls[i][j]) {
                left[i][j] = 1 + left[i][j - 1] ;
                up[i][j] = 1 + up[i - 1][j] ;
                zid = std::max(zid, std::max(left[i][j], up[i][j])) ;
            } else left[i][j] = 0 ;
        }
    }
    bfs1(R1, R2) ;
    bfs2(R3, R4) ;
    if (zid == 1) {
        zid = 0 ;
    }
    checkCol(3, 3, 1) ;
#ifndef INFOARENA
    for (i = 1 ; i <= n ; ++ i) {
        for (j = 1 ; j <= n ; ++ j) {
            fprintf(out, "%d ", ro1[i][j]) ;
        }
        fputc('\n', out) ;
    }
    fputc('\n', out) ;
    for (i = 1 ; i <= n ; ++ i) {
        for (j = 1 ; j <= n ; ++ j) {
            fprintf(out, "%d ", ro2[i][j]) ;
        }
        fputc('\n', out) ;
    }
    fprintf(out, "%d %d %d %d\n", rob1A, rob1B, rob2A, rob2B) ;
#endif
    fprintf(out, "%d\n%d", zid, std::min(std::max(rob1A, rob2B), std::max(rob1B, rob2A))) ;
}
